#!/bin/bash

#
# ********** DONT RUN THIS UNLESS YOU UNDERSTAND WHAT IT DOES ********
# **********             SERIOUS DAMAGE MAY OCCUR             ********
#
# Publish built $PRODUCTs and their dependencies
#
# $ publish [-b <build_id>] [-t <distservtag>] [product1 [product2 [...]]]
#
# Example:
#    'publish -t current' will publish the build found in $LSSTSW_BUILD_DIR
#    and tag it as 'current' on the distribution server
#

DISTRIBTAG=
BUILD=

set -e
DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck source=./etc/settings.cfg.sh
. "${DIR}/../etc/settings.cfg.sh"

usage() { echo "Usage: $0 [-b <build_id>] [-t <distservtag>] <product1> [product2 [...]]" 1>&2; exit 1; }

run() {
  if [[ $DRYRUN == true ]]; then
    echo "$@"
  elif [[ $DEBUG == true ]]; then
    (set -x; "$@")
  else
    "$@"
  fi
}

print_settings() {
  local vars=(
    BUILD
    DISTRIBTAG
    DEBUG
    LSSTSW
    LSSTSW_BUILD_DIR
  )

  # print env vars prefixed with ^EUPS
  IFS=" " read -r -a eups_vars <<< "${!EUPS@}"
  vars+=("${eups_vars[@]}")

  for i in "${vars[@]}"
  do
    echo "${i}: ${!i}"
  done
}

while getopts ":b:t:d" o; do
  case "$o" in
  b)
    BUILD="$OPTARG"
    ;;
  t)
    DISTRIBTAG="$OPTARG"
    ;;
  d)
    DEBUG=true
    ;;
  *)
    usage
    ;;
  esac
done
shift $((OPTIND-1))

if [[ $# -eq 0 ]]; then
  usage
fi

PRODUCTS=("$@")

for prod in "${PRODUCTS[@]}"; do
  if [[ -z "$prod" ]]; then
    echo "zero length product names are not permitted"
    usage
  fi
  if [[ $prod == *[[:space:]]* ]]; then
    echo "white spaces are not permitted in product names"
    usage
  fi
done

if [[ -z $BUILD ]]; then
  if [[ -n $DISTRIBTAG ]]; then
    # Default the build ID to distserver tag value
    BUILD="$DISTRIBTAG"
    echo "[publish] Build ID defaulting to distserver tag, $BUILD."
  else
    # Find out the build ID
    eval "$(run grep -E '^BUILD=' "$LSSTSW_BUILD_DIR"/manifest.txt)"
    echo "[publish] Build ID deduced from manifest.txt, $BUILD."
  fi
fi

if [[ $DEBUG == true ]]; then
	cat <<-EOF
	----------------------------------------------------------------
	$(print_settings)
	----------------------------------------------------------------
	EOF
fi

#
# Create the distribution packages
#
for product in "${PRODUCTS[@]}"; do
  run eups distrib create --server-dir="$EUPS_PKGROOT" -f generic -d eupspkg -t "$BUILD" "$product"
done

#
# Declare the build tag, and declare it $DISTRIBTAG, if set
#
run eups distrib declare --server-dir="$EUPS_PKGROOT" -t "$BUILD"

echo "::: Creating folders {env,tags}"
mkdir -p "${EUPS_PKGROOT}"/{env,tags}
echo "::: Saving pinned environment information"
run cp "${LSSTSW_BUILD_DIR}/builds/${BUILD}.env" "${EUPS_PKGROOT}/env"
ls -l "${EUPS_PKGROOT}/env/${BUILD}.env"

if [[ -n $DISTRIBTAG && "$DISTRIBTAG" != "$BUILD" ]]; then
  echo "Adding tag '$DISTRIBTAG' at the distribution server."

  match='EUPS distribution ([^ ]+) version list. Version 1.0'
  # Saving as CONDA_ENV only the environemnt reference, that may be different from the one specified in settings.cfg
  if [ -n "$RUBINENV_VER" ]; then
    conda_env="$RUBINENV_VER"
  else
    conda_env="${LSST_CONDA_ENV_NAME#"$SPLENV_BASE_NAME"-}"
  fi
  sub="EUPS distribution ${DISTRIBTAG} version list. Version 1.0\\n#BUILD=\\1\\n#CONDA_ENV=${conda_env}"
  src_tag="${EUPS_PKGROOT}/tags/${BUILD}.list"
  dst_tag="${EUPS_PKGROOT}/tags/${DISTRIBTAG}.list"

  run sed -r "s|${match}|${sub}|" "$src_tag" > "$dst_tag"

  # remove the original bNNNN tag to reduce tag proliferation
  rm "$src_tag"

  run cp "${LSSTSW_BUILD_DIR}/builds/${BUILD}.env" "${EUPS_PKGROOT}/env/${DISTRIBTAG}.env"
fi

#
# Publish the newinstall script, if declared current
#
if [[ $DISTRIBTAG == current ]] && eups list -t "$BUILD" lsst >/dev/null 2>&1; then
  echo "Copying newinstall.sh to the distribution server."
  run cp -a "$(eups list -t "$BUILD" -d lsst)/bin/newinstall.sh" "${EUPS_PKGROOT}/"
fi

# vim: tabstop=2 shiftwidth=2 expandtab
