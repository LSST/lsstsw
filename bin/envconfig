#!/bin/bash

# setup lsstsw environment
#
# source this file from your ~/.bashrc or ~/.zshrc
#
# relative to <lsstsw>/bin/

print_error() {
  >&2 echo -e "$@"
}

usage() {
  if [[ -n "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  (cat <<-EOF

		Usage: $0  [-i] [-n] [-b] [-h]

		Specific options:
	-i          interactive, choose from a list of available environments
	-n NAME     activate the environment name
	-b bXXXX    activate the environment used for the build with id bXXXX
	-h          show this message

		EOF
  )

  finish=true
   
}

parse_args() {
  local OPTIND
  local opt

  while getopts "bnih" opt; do
    case "$opt" in
    b)
      shift;
      BUILD_ID=$1
      ;;
    n)
      shift;
      ENV_NAME=$1
      ;;
    i)
      INTERACTIVE=true
      ;;
    h)
      usage
      ;;
    *)
      usage "Unknown option: ${opt}"
      ;;
    esac
  done
  shift $((OPTIND-1))
}

##############

INTERACTIVE=false
ENV_NAME=""
BUILD_ID=""
finish=false

parse_args "$@"

if [ "$finish" = true ]; then
  return
fi

if [[ -n $BASH_VERSION ]]; then
  LSSTSW=$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd) || return 1
  SUFFIX='sh'
else
  LSSTSW=$(cd "$(dirname "$0")/.."; pwd) || return 1
  # shellcheck disable=SC2034
  SUFFIX='zsh'
fi

# shellcheck disable=SC1090
source "${LSSTSW}/etc/settings.cfg.sh"

# shellcheck disable=SC1090
# shellcheck disable=SC2154
function path_remove {
  PATH=${PATH/":$1"/}
  PATH=${PATH/"$1:"/}
}

function_exists() {
  (
    set +e
    declare -f -F $1 > /dev/null
    return $?
  )
}

if [[ -f $CONDA_EXE ]]; then
  function_exists conda && unset -f conda
  condabin_exe=`which conda`
  if [[ -f $condabin_exe ]]; then
    condabin_path=`dirname $condabin_exe`
    path_remove $condabin_path
  fi
fi

# shellcheck disable=SC1090
if [[ -n $BASH_VERSION ]]; then
  __conda_setup="$(${miniconda_path}/bin/conda 'shell.bash' 'hook' 2> /dev/null)"
else
  __conda_setup="$(${miniconda_path}/bin/conda 'shell.zsh' 'hook' 2> /dev/null)"
fi

eval "$__conda_setup"


export PATH="$LSSTSW/bin:$PATH"

if $INTERACTIVE ; then
  raw_envs=()
  # get the list of available environments
  while IFS=$'\n' read -r line 
  do 
    if [[ "$line" != '' ]] ; then
      raw_envs+=("$line")
    fi
  done < <(conda env list | grep -v "^#" | grep -v "^ " | grep -v "^base")
  envs=()
  l=0
  for i in "${raw_envs[@]}"; do
    ((l++))
    envs[l]=$(echo "${i}" | cut -f 1 -d ' ')
    echo "${l} - ${envs[${l}]}"
  done
  echo "0 - EXIT (return)"
  read -r -p "Choose environment [0 to ${l}]: " eid
  if  [[ "${eid}" -eq 0 ]] ; then
    return
  fi
  if [[ -z "${envs[${eid}]}" ]] ; then
    echo "User input error: ${eid} not in range."
    return
  else
    LSST_CONDA_ENV_NAME="${envs[${eid}]}"
  fi
elif [[ $ENV_NAME != "" ]]; then
  echo "Setting $ENV_NAME environment..."  
  LSST_CONDA_ENV_NAME=${ENV_NAME}
elif [[ $BUILD_ID != "" ]]; then
  echo "Looking for the environment used in build ${BUILD_ID}..."
  if [[ -f "build/builds/${BUILD_ID}.env" ]]; then
    LSST_CONDA_ENV_NAME=$(grep 'environment_name' build/builds/"${BUILD_ID}".env | cut -f 2 -d ' ')
    echo "Activating environment ${LSST_CONDA_ENV_NAME}"
  else
    echo "No build found with id ${BUILD_ID}"
    return
  fi
else
  # in case no ref is given as parameter, attach the default SHA-1 to $SPLENV_BASE_NAME (lsst-scipipe)
  LSST_CONDA_ENV_NAME=${LSST_CONDA_ENV_NAME:-"${SPLENV_BASE_NAME}-${LSST_SPLENV_REF}"}
  echo "Setting the environment... ${LSST_CONDA_ENV_NAME}"
fi

# shellcheck disable=SC1091
conda activate "$LSST_CONDA_ENV_NAME"
export LSST_CONDA_ENV_NAME

# check if eups is not already available in the environment
# if not, make it available from a separate eups-base environment
if ! command -v eups > /dev/null; then
  echo "error: No eups found in the active environment ..."
  echo "  ... trying to use a stacked eups-base environment"
  conda deactivate
  if ! conda env list | grep "^eups-base " > /dev/null; then
    echo "::: Creating eups-base environment"
    conda create -y --name eups-base eups -c conda-forge
  fi
  conda activate eups-base
  conda activate --stack "$LSST_CONDA_ENV_NAME"
fi

# Define and check EUPS_PATH
export EUPS_PATH="${LSSTSW}/stack/${LSST_CONDA_ENV_NAME#$SPLENV_BASE_NAME-}"
if [ ! -d "$EUPS_PATH" ]; then
  mkdir -p "${EUPS_PATH}"/{site,ups_db}
  echo "::: Deploying manifest.remap"
  ln -sf "${LSSTSW}/etc/manifest.remap" "${EUPS_PATH}/site/manifest.remap"
fi
echo "EUPS_PATH set to ${EUPS_PATH}"
export RUBIN_EUPS_PATH="${EUPS_PATH}"

setup -r "$LSSTSW/lsst_build"

echo "notice: lsstsw tools have been set up."

# vim: tabstop=2 shiftwidth=2 expandtab
